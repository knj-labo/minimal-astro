---
// This would use actual Content Collections API in real implementation
const { slug } = Astro.params;

// Mock post data - in real implementation this would come from collections
const posts = {
  welcome: {
    title: "Welcome to Minimal Astro",
    description: "A simple blog built with our reimplemented Astro framework",
    publishDate: "2024-01-15",
    author: "jp-knj",
    tags: ["astro", "framework", "islands", "tutorial"],
    content: `
      <h1>Welcome to Minimal Astro!</h1>
      <p>This is our first blog post using the <strong>Minimal Astro</strong> framework - a reimplementation of Astro built from the ground up for educational purposes.</p>
      
      <h2>What We've Built</h2>
      <p>Our minimal implementation includes:</p>
      
      <ul>
        <li>üèóÔ∏è <strong>Complete AST Parser</strong> - Handles .astro file syntax with frontmatter, HTML, and expressions</li>
        <li>üé® <strong>HTML Builder</strong> - Generates optimized static HTML with streaming support</li>
        <li>‚ö° <strong>Vite Integration</strong> - Full HMR support with error overlays and caching</li>
        <li>üèùÔ∏è <strong>Islands Architecture</strong> - Selective hydration with multiple strategies</li>
        <li>üîÑ <strong>Multi-framework Support</strong> - React, Vue, and Svelte renderers</li>
        <li>üìù <strong>Content Collections</strong> - Type-safe content management with file system scanning</li>
      </ul>
      
      <h2>Islands Architecture in Action</h2>
      <p>The beauty of Islands Architecture is that JavaScript only loads when and where you need it.</p>
      
      <p><em>Built with ‚ù§Ô∏è using Minimal Astro</em></p>
    `,
  },
  "islands-architecture": {
    title: "Understanding Islands Architecture",
    description: "Deep dive into the Islands Architecture pattern and why it matters for web performance",
    publishDate: "2024-01-20",
    author: "jp-knj",
    tags: ["islands", "architecture", "performance", "javascript"],
    content: `
      <h1>Understanding Islands Architecture</h1>
      <p>Islands Architecture represents a paradigm shift in how we think about client-side JavaScript delivery.</p>
      
      <h2>The Problem with Traditional SPAs</h2>
      <p>Single Page Applications often suffer from JavaScript bloat, poor initial loading, and hydration overhead.</p>
      
      <h2>The Islands Solution</h2>
      <p>Islands Architecture solves these problems by using server-first rendering and selective hydration.</p>
      
      <h2>Performance Benefits</h2>
      <p>Real-world measurements show 50-80% smaller initial bundles and faster Time to Interactive.</p>
      
      <p><em>This post demonstrates Islands Architecture in practice!</em></p>
    `,
  },
};

const post = posts[slug];

if (!post) {
  return new Response("Post not found", { status: 404 });
}
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content={post.description} />
    <title>{post.title} | Minimal Astro Blog</title>
    <link rel="stylesheet" href="/styles.css" />
  </head>
  <body>
    <div class="container">
      <nav class="nav">
        <a href="/">‚Üê Back to Blog</a>
      </nav>

      <article class="article">
        <header class="article-header">
          <h1 class="article-title">{post.title}</h1>
          <div class="article-meta">
            By {post.author} ‚Ä¢ {post.publishDate}
          </div>
          <div class="article-tags">
            {post.tags.map(tag => `<a href="/tags/${tag}" class="tag">${tag}</a>`).join('')}
          </div>
        </header>

        <div class="article-content" set:html={post.content}></div>
      </article>

      <footer class="footer">
        <a href="/">‚Üê Back to Blog</a>
      </footer>
    </div>
  </body>
</html>