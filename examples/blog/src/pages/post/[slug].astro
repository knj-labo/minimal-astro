---
import Layout from '../../components/Layout.astro';
import Counter from '../../components/Counter.jsx';

// For now, we'll simulate the post data based on the slug
const { slug } = Astro.params;

// Mock post data - in a real implementation, this would come from content collections
const posts = {
  'welcome': {
    slug: 'welcome',
    data: {
      title: 'Welcome to Minimal Astro Blog',
      description: 'Learn how to build your own static site generator from scratch',
      date: new Date('2024-01-01'),
      author: 'jp-knj',
      tags: ['astro', 'web development', 'tutorial']
    },
    content: `
      <p>Welcome to our Minimal Astro implementation! This blog demonstrates the power of building your own static site generator from scratch.</p>
      
      <h2>What You'll Learn</h2>
      <p>In this series, we'll cover:</p>
      <ul>
        <li>Building an Astro file parser</li>
        <li>Implementing server-side rendering</li>
        <li>Creating a component system</li>
        <li>Adding multi-framework support</li>
        <li>Implementing Islands Architecture</li>
      </ul>
    `
  },
  'islands-architecture': {
    slug: 'islands-architecture',
    data: {
      title: 'Understanding Islands Architecture',
      description: 'Deep dive into the Islands Architecture pattern',
      date: new Date('2024-01-15'),
      author: 'jp-knj',
      tags: ['architecture', 'performance', 'javascript']
    },
    content: `
      <p>Islands Architecture is a pattern for building web applications that delivers exceptional performance by shipping less JavaScript to the browser.</p>
      
      <h2>Key Concepts</h2>
      <p>The main idea is to render HTML on the server and only hydrate interactive components on the client.</p>
    `
  }
};

const post = posts[slug] || posts['welcome'];

const formattedDate = new Date(post.data.date).toLocaleDateString('ja-JP', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});
---

<Layout title={post.data.title} description={post.data.description}>
  <article>
    <header class="post-header">
      <h1>{post.data.title}</h1>
      <div class="post-meta">
        <time datetime={post.data.date.toISOString()}>{formattedDate}</time>
        <div class="author">
          <span>by {post.data.author}</span>
        </div>
      </div>
      <div class="tags">
        {post.data.tags.map(tag => (
          <span class="tag">{tag}</span>
        ))}
      </div>
    </header>

    <div class="post-content">
      {post.slug === 'welcome' ? (
        <div>
          <p>Welcome to our Minimal Astro implementation! This blog demonstrates the power of building your own static site generator from scratch.</p>
          
          <h2>What You'll Learn</h2>
          <p>In this series, we'll cover:</p>
          <ul>
            <li>Building an Astro file parser</li>
            <li>Implementing server-side rendering</li>
            <li>Creating a component system</li>
            <li>Adding multi-framework support</li>
            <li>Implementing Islands Architecture</li>
          </ul>
        </div>
      ) : (
        <div>
          <p>Islands Architecture is a pattern for building web applications that delivers exceptional performance by shipping less JavaScript to the browser.</p>
          
          <h2>Key Concepts</h2>
          <p>The main idea is to render HTML on the server and only hydrate interactive components on the client.</p>
        </div>
      )}
    </div>

    <div class="post-actions">
    </div>

    <div class="demo-section">
      <h3>Try the Interactive Demo</h3>
      <p>This React counter demonstrates Islands Architecture - it's only hydrated when needed:</p>
      <Counter client:load />
    </div>
  </article>
</Layout>

<style>
  article {
    max-width: 800px;
    margin: 0 auto;
  }

  .post-header {
    margin-bottom: 3rem;
  }

  .post-header h1 {
    font-size: 2.5rem;
    margin-bottom: 1rem;
    line-height: 1.2;
  }

  .post-meta {
    display: flex;
    align-items: center;
    gap: 1rem;
    color: #666;
    margin-bottom: 1rem;
  }

  .author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .author img {
    width: 2rem;
    height: 2rem;
    border-radius: 50%;
  }

  .tags {
    display: flex;
    gap: 0.5rem;
  }

  .tag {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background: #e5e7eb;
    border-radius: 9999px;
    font-size: 0.875rem;
    color: #4b5563;
  }

  .post-content {
    font-size: 1.125rem;
    line-height: 1.75;
    margin-bottom: 3rem;
  }

  .post-content :global(h1),
  .post-content :global(h2),
  .post-content :global(h3) {
    margin-top: 2rem;
    margin-bottom: 1rem;
  }

  .post-content :global(p) {
    margin-bottom: 1.5rem;
  }

  .post-content :global(pre) {
    background: #1e293b;
    color: #e2e8f0;
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin-bottom: 1.5rem;
  }

  .post-content :global(code) {
    background: #e5e7eb;
    padding: 0.125rem 0.375rem;
    border-radius: 0.25rem;
    font-size: 0.875em;
  }

  .post-content :global(pre code) {
    background: none;
    padding: 0;
  }

  .post-content :global(ul),
  .post-content :global(ol) {
    margin-bottom: 1.5rem;
    padding-left: 1.5rem;
  }

  .post-content :global(li) {
    margin-bottom: 0.5rem;
  }

  .post-actions {
    padding: 2rem 0;
    border-top: 1px solid #e5e7eb;
    border-bottom: 1px solid #e5e7eb;
  }

  .demo-section {
    background: #f9fafb;
    padding: 2rem;
    border-radius: 0.5rem;
    margin-top: 3rem;
  }

  .demo-section h3 {
    margin-bottom: 1rem;
  }
</style>